# 양의 정수
a = 1

# 음의 정수
a = -1

# 0
a = 0

# 양의 실수
a = 160.05

#음의 실수
a = - 15.25

#소수부가 0일 때 0을 생략
a = 5.
print(a) # 5.0

# 정수부가 0일 때 0을 생략
a = -.7
print(a) # -0.7

e나 E는 10의 지수부 의미

유효숫자e^지수 = 유효숫자 x 10^지수 무한(INF)로 설정.
a = 1e9  # 1,000,000,000 지수 표현 방식
(실수형으로 대입됨)
a = 1e9 # 1000000000.0
a = int(1e9) # 1000000000


123.456 소수 셋째 자리에서 반올림  round(123.456,2)
 = 123.46
 
 나누기 연산자 (/)  나눠진 결과를 실수형으로 반환 (c와 c++ 과 다름 얘네는 정수형)
 
파이썬 몫 얻기 위해 (//) 사용

a = 7
b = 3

print(a/b) # 2.33333

print(a % b) # 1

print(a // b) # 2





리스트 자료형 
배열의 기능 및 연결 리스트와 유사한 기능(c나 자바 에서의)
c++ STL vector와 유사

리스트 초기화
리스트는 대괄호([]) 안에 원소를 넣어 초기화, 쉼표(,)로 원소를 구분
비어 있는 리스트 선언   list() or []

a = [1,2,3,4,5,6,7,8,9]
print(a)   #  [1,2,3,4,5,6,7,8,9]

#네 번째 원소 출력
print(a[3])

#크기 N, 모든 값 0인 1차원 리스트 초기화
n = 10
a = [0] * n
print(a) = [0,0,0,0,0,0,0,0,0,0]

파이썬 인덱스 값은 양의 정수 음의 정수 모두 사용 
음의 정수는 -1 부터 시작하여 역으로 탐색

연속적인 위치는 슬라이싱 이용

대괄호 안에 콜론(:)을 넣어서 시작 인덱스와 끝 인덱스 설정
끝 인덱스는 실제 인덱스보다 1을 더 크게 설정

a = [1,2,3,4,5,6,7,8,9]

#네 번째 원소만 출력
print(a[3])

#두 번째 원소부터 네 번째 원소까지
print(a[1:4]) # [2,3,4]

리스트 컴프리헨션
대괄호 안에 조건문과 반복문을 적용하여 리스트 초기화
array = [i for i in range(10)]

print(array) # [0,1,2,3,4,5,6,7,8,9]

#0부터 19까지의 수 중에서 홀수만 포함하는 리스트
array = [i for i in range(20) if i % 2 == 1]

#1부터 9까지의 수들의 제곱 값을 포함하는 리스트

array = [ i * i for i in range(1,10) ]

리스트 컴프리헨션은 2차원 리스트를 초기화할 때 효과적으로 사용

N * M 크기의 2차원 리스트 한 번에 초기화
array = [[0] * m for_in range(n)]


파이썬에서는 반복을 수행하되 반복을 위한 변수의 값을 무시하고자 할 때 언더바(_)를 자주 사용

summary = 0
for i in range(1, 10):
  summary += i
print(summary)

for_in range(5):
  print("hello world")
  
  
append()  변수명.append() 리스트에 원소를 하나 삽입   O(1)
sort()    변수명.sort() 기본 정렬 기능 오름차순으로 정렬 O(NlogN)
          변수명.sort(reverse = True) 내림차순으로 정렬
reverse() 변수명.reverse() 리스트의 원소의 순서를 모두 뒤집어 놓는다. O(N)
insert()  insert(삽입할 위치 인덱스, 삽입할 값) 특정한 인덱스 위치에 원소를 삽입할 때 사용한다. O(N)
count()   변수명.count(특정 값) 리스트에서 특정한 값을 가지는 데이터의 개수를 셀 때 사용한다. O(N)
remove()  변수명.remove(특정 값) 특정한 값을 갖는 원소를 제거하는데, 값을 가진 원소가 여러 개면 하나만 제거한다 O(N)

a = [1,2,3,4,5,5,5]
remove_set = {3,5}

#remove_list에 포함되지 않은 값만을 저장
result = [i for i in a if i not in remove_set]
print(result) #[1,2,4]

문자열 자료형

문자열 변수를 초기화 할 때 큰따옴표(")나 작은 따옴표(')를 이용 (파이썬은 상관 없음)


data = 'Hello World'
print(data)         # Hello World

data = "Don`t you know |"Python|"?"
print(data)  #Don`t you know "Python"?

문자열 변수에 덧셈을 이용하면 문자열이 더해져서 연결(Concatenate)된다
문자열 변수를 양의 정수와 곱하는 경우, 문자열이 그 값만큼 여러 번 더해진다.
문자열 인덱싱과 슬라이싱 이용할 수 있으나 값 변경은 힘들다.


튜플 자료형
튜플은 한 번 선언된 값 변경 불가능
리스트는 대괄호([]) 이용, 튜플은 소괄호(())를 이용
튜플은 리스트에 비해 상대적으로 공간 효율적


튜플을 사용하면 좋은 경우

- 서로 다른 성질의 데이터를 묶어서 관리해야 할 때
  (최단 경로 알고리즘에서는 (비용,노드 번호)의 형태로 튜플 자료형 자주 사용
- 데이터의 나열을 해싱(Hashing)의 키 값으로 사용해야 할 때
  (튜플은 변경이 불가능하므로 리스트와 다르게 키 값으로 사용될 수 있다)
- 리스트보다 메모리를 효율적으로 사용해야 할 때





