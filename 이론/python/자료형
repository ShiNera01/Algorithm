# 양의 정수
a = 1

# 음의 정수
a = -1

# 0
a = 0

# 양의 실수
a = 160.05

#음의 실수
a = - 15.25

#소수부가 0일 때 0을 생략
a = 5.
print(a) # 5.0

# 정수부가 0일 때 0을 생략
a = -.7
print(a) # -0.7

e나 E는 10의 지수부 의미

유효숫자e^지수 = 유효숫자 x 10^지수 무한(INF)로 설정.
a = 1e9  # 1,000,000,000 지수 표현 방식
(실수형으로 대입됨)
a = 1e9 # 1000000000.0
a = int(1e9) # 1000000000


123.456 소수 셋째 자리에서 반올림  round(123.456,2)
 = 123.46
 
 나누기 연산자 (/)  나눠진 결과를 실수형으로 반환 (c와 c++ 과 다름 얘네는 정수형)
 
파이썬 몫 얻기 위해 (//) 사용

a = 7
b = 3

print(a/b) # 2.33333

print(a % b) # 1

print(a // b) # 2





리스트 자료형 
배열의 기능 및 연결 리스트와 유사한 기능(c나 자바 에서의)
c++ STL vector와 유사

리스트 초기화
리스트는 대괄호([]) 안에 원소를 넣어 초기화, 쉼표(,)로 원소를 구분
비어 있는 리스트 선언   list() or []

a = [1,2,3,4,5,6,7,8,9]
print(a)   #  [1,2,3,4,5,6,7,8,9]

#네 번째 원소 출력
print(a[3])

#크기 N, 모든 값 0인 1차원 리스트 초기화
n = 10
a = [0] * n
print(a) = [0,0,0,0,0,0,0,0,0,0]

파이썬 인덱스 값은 양의 정수 음의 정수 모두 사용 
음의 정수는 -1 부터 시작하여 역으로 탐색

연속적인 위치는 슬라이싱 이용

대괄호 안에 콜론(:)을 넣어서 시작 인덱스와 끝 인덱스 설정
끝 인덱스는 실제 인덱스보다 1을 더 크게 설정

a = [1,2,3,4,5,6,7,8,9]

#네 번째 원소만 출력
print(a[3])

#두 번째 원소부터 네 번째 원소까지
print(a[1:4]) # [2,3,4]

리스트 컴프리헨션
대괄호 안에 조건문과 반복문을 적용하여 리스트 초기화
array = [i for i in range(10)]

print(array) # [0,1,2,3,4,5,6,7,8,9]

#0부터 19까지의 수 중에서 홀수만 포함하는 리스트
array = [i for i in range(20) if i % 2 == 1]

#1부터 9까지의 수들의 제곱 값을 포함하는 리스트

array = [ i * i for i in range(1,10) ]

리스트 컴프리헨션은 2차원 리스트를 초기화할 때 효과적으로 사용

N * M 크기의 2차원 리스트 한 번에 초기화
array = [[0] * m for_in range(n)]


파이썬에서는 반복을 수행하되 반복을 위한 변수의 값을 무시하고자 할 때 언더바(_)를 자주 사용

summary = 0
for i in range(1, 10):
  summary += i
print(summary)

for_in range(5):
  print("hello world")
  
  
append()  변수명.append() 리스트에 원소를 하나 삽입   O(1)
sort()    변수명.sort() 기본 정렬 기능 오름차순으로 정렬 O(NlogN)
          변수명.sort(reverse = True) 내림차순으로 정렬
reverse() 변수명.reverse() 리스트의 원소의 순서를 모두 뒤집어 놓는다. O(N)
insert()  insert(삽입할 위치 인덱스, 삽입할 값) 특정한 인덱스 위치에 원소를 삽입할 때 사용한다. O(N)
count()   변수명.count(특정 값) 리스트에서 특정한 값을 가지는 데이터의 개수를 셀 때 사용한다. O(N)
remove()  변수명.remove(특정 값) 특정한 값을 갖는 원소를 제거하는데, 값을 가진 원소가 여러 개면 하나만 제거한다 O(N)

a = [1,2,3,4,5,5,5]
remove_set = {3,5}

#remove_list에 포함되지 않은 값만을 저장
result = [i for i in a if i not in remove_set]
print(result) #[1,2,4]

문자열 자료형

문자열 변수를 초기화 할 때 큰따옴표(")나 작은 따옴표(')를 이용 (파이썬은 상관 없음)


data = 'Hello World'
print(data)         # Hello World

data = "Don`t you know |"Python|"?"
print(data)  #Don`t you know "Python"?

문자열 변수에 덧셈을 이용하면 문자열이 더해져서 연결(Concatenate)된다
문자열 변수를 양의 정수와 곱하는 경우, 문자열이 그 값만큼 여러 번 더해진다.
문자열 인덱싱과 슬라이싱 이용할 수 있으나 값 변경은 힘들다.


튜플 자료형
튜플은 한 번 선언된 값 변경 불가능
리스트는 대괄호([]) 이용, 튜플은 소괄호(())를 이용
튜플은 리스트에 비해 상대적으로 공간 효율적


튜플을 사용하면 좋은 경우

- 서로 다른 성질의 데이터를 묶어서 관리해야 할 때
  (최단 경로 알고리즘에서는 (비용,노드 번호)의 형태로 튜플 자료형 자주 사용
- 데이터의 나열을 해싱(Hashing)의 키 값으로 사용해야 할 때
  (튜플은 변경이 불가능하므로 리스트와 다르게 키 값으로 사용될 수 있다)
- 리스트보다 메모리를 효율적으로 사용해야 할 때


사전 자료형

- 사전 자료형은 키(Key)와 값(Value)의 쌍을 데이터로 가지는 자료형
 (앞서 다루었던 리스트나 튜플이 값을 순차적으로 저장하는것과 대비됨)
- 사전 자료형은 키와 값의 쌍을 데이터로 가지며, 원하는 변경 불가능한 자료형을 키로 사용할 수 있다.
- 파이썬의 사전 자료형은 해시 테이블(Hash Table)을 이용하므로 데이터의 조회 및 수정에 있어서 O(1)의 시간에 처리할 수 있다

data = dict()
data['사과'] = 'Apple'
data['바나나'] = 'Banana'
data['코코넛'] = 'Coconut'

print(data)  #{'사과' : 'Apple', '바나나' : 'Banana' , '코코넛' : 'Coconut'}

if '사과' in data:
 print("'사과'를 키로 가지는 데이터가 존재합니다.") 
 
사전 자료형에서는 키와 값을 별도로 뽑아내기 위한 메서드 지원
키 데이터만 뽑아서 리스트 이용 keys()함수
값 데이터만 뽑아서 리스트 이용 values()함수

a = dict()
a['홍길동'] = 97
a['이순신'] = 98

b = {
 '홍길동' : 97,
 '이순신' : 98
}


key_list = list(b.keys()) # list형태로 형변환


집합 자료형

- 중복을 허용하지 않음
- 순서가 없음

- 집합은 리스트 혹은 문자열 이용해서 초기화
 (set()함수 사용)
 
 data = set([1,1,2,3,4,4,5])
 print(data)   #{1,2,3,4,5}
 data = {1,1,2,3,4,4,5}
 print(data) #{1,2,3,4,5}
 
 집합 자료형은 합집합, 교집합, 차집합 연산등 사용할 수 있음
 
 #합집합
 print(a | b)
 
 #교집합
 print(a & b)
 
 #차집합
 print(a - b)
 
 data = set([1,2,3])
 #새로운 원소 추가
 data.add(4)
 
 #새로운 원소 여러 개 추가
 data.update([5,6])
 
 #특정한 값 원소 삭제
 data.remove(3)

사전 자료형과 집합 자료형의 특징
리스트나 튜플은 순서가 있기 때문에 인덱싱을 통해 자료형의 값
사전 자료형과 집합 자료형은 순서가 없기 때문에 인덱싱으로 값 얻을 수 없다.
사전의 키 혹은 집합의 원소를 이용해  O(1)로 연산 가능


기본 입출력

input() 함수는 한 줄의 문자열을 입력 받는 함수
map() 함수는 리스트의 모든 원소에 각각 특정한 함수를 적용할 때 사용

공백을 기준으로 구분된 데이터를 입력 받을 때는 다음과 같이 사용
- list(map(int, input().split()))

#데이터의 개수 입력
n = int(input())
data = input() #78 94 32 85 43

print(n) # n출력
print(data) #78 94 32 85 43

data = input().split()
print(data) # ['78', '93', '24', '95', '94']

data = list(map(int, input().split())) # 78 95 34 15 75
print(data)  # [78, 95, 34, 15, 75]


a,b,c = map(int, input().split())
#3개 고정이라면

파이썬의 경우 sys.stdin.readline() 메서드 이용
입력 후 엔터가 줄 바꿈 기호로 입력되므로 rstrip()메서드를 함께 사용

import sys
data = sys.stdin.readline().rstrip()
print(data)

파이썬에서 기본 출력은 print() 함수 이용
각 변수를 콤마(,)를 이용하여 띄어쓰기로 구분하여 출력할 수 있다.
print()는 기본적으로 출력 이후에 줄 바꿈 수행
줄 바꿈을 원치 않는 경우 'end' 속성 이용
print(7, end=" ")
print(8, end=" ")     #7 8

f-string 예제
중괄호 안에 변수명을 기입하여 간단히 문자열과 정수를 함께 넣을 수 있다.
answer = 7
print(f"정답은 {answer}입니다.")  #정답은 7 입니다.

파이썬에서는 if문에서는 아무 행위 안하더라도 pass를 기입하여야 한다.

result = "Success" if score >= 80 else "Fail" # 한 줄에 작성 가능

파이썬에서는 x>0 and x < 20을 0 < x < 20으로 작성 가능


for 변수 in 리스트:  #리스트나 튜플등 사용
for문에서 연속적인 값을 차례대로 순회할 때는 range()를 주로 사용

range(시작 값, 끝 값 + 1) 형태로 사용
인자를 하나만 넣으면 자동으로 시작 값은 0이 된다.

for i in range(1, 10):
 #i는 1부터 9 까지 반복



global a #global 키워드로 변수를 지정하면 해당 함수에서는 지역 변수를 만들지 않고, 함수 바깥에 선언된 변수를 바로 참조하게 된다.

a = 10
def func():
 a = 0
 a += 1
 print(a)
func()


def func():
 global a
 a += 1
 print(a)


array = [1,2,3,4,5]

def func():
 array.append(6)
 print(array)
 
func() list는 참조 가능

global array를 하여 전역변수 사용 가능


파이썬에서는 함수는 여러 개의 반환 값을 가질 수 있다.
def operator(a,b)

return add,subtract,mul,divide

a,b,c,d = operator(a,b)
print(a,b,c,d) # 차례대로 4개에 반환됨

람다 표현식
print((lambda a, b: a + b)(3,7)) #add함수를 람다 표현식으로 표현


array = [('홍길동', 50), ('이순신',32), ('아무개', 74)]

def my_key(x):
 return x[1]
 
 
print(sorted(array, key = my_key))
print(sorted(array, key = lambda x : x[1]))   #나이순으로 
list1 = [1,2,3,4,5]
list2 = [6,7,8,9,10]

result = map(lambda a, b: a+ b, list1, list2)

print(list(result))  #[7,9,11,13,15]


표준 라이브러리

itertools : 파이썬에서 반복되는 형태의 데이터 처리하기 위한 유용한 기능, 순열과 조합 라이브러리

heapq : 힙(heap)자료구조를 제공
일반적으로 우선순위 큐 기능을 구현하기 위해 사용
bisect : 이진 탐색(Binary Search) 기능 제공
collections: 덱,카운터 등의 유용한 자료구조
math : 필수적인 수학적 기능 제공

result = sum([1,2,3,4,5]) #15

min_result = min(7,3,5,2) #2
max_result = max(7,3,5,2) #7
result = eval("(3+5)*7") #계산을 수로 반환


sorted([9,1,8,5,4])  #오름차순
sorted([9,1,8,5,4], reverse=True) #내림차순


#sorted() with key
array = [('홍길동',35), ('이순신',75), ('아무개',50)]
result = sorted(array, key = lambda x : x[1], reverse = True)
print(result)
#나이 내림차순으로 정렬됨


순열과 조합
from itertools import permutations
data = ['A', 'B', 'C'] #데이터 준비
result = list(permutations(data, 3)) #모든 순열 구하기
print(result)
#3개 골라서 모든 순열

from itertools import combinations
result = list(combinations(data,2)) #2개를 뽑는 모든 조합 구하기
print(result)

from itertools import product
#중복순열
result = list(product(data, repeat = 2)) #2개 뽑는 모든 순열 구하기

from itertools import combinations_with_replacement
#중복 조합

result = list(combinations_with_replacement(data,2))

Counter
from collections import Counter

counter = Counter(['red', 'blue' ,'red', 'green' ,'blue', 'blue'])

print(counter['blue']) #'blue'가 등장한 횟수 출력
print(counter['green']) #'green'이 등장한 횟수 출력
print(dict(counter)) #사전 자료형으로 반환


import math
def lcm(a, b):
 return a*b//math.gcd(a,b)
 
print(math.gcd(21,14)) #최대 공약수 계산
print(lcm(21,14)) #최소 공배수


